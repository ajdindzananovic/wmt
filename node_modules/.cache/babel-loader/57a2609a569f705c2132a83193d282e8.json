{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\benjamin.dedic\\\\Documents\\\\react\\\\wmt\\\\src\\\\_components\\\\DomainInfo.jsx\";\nimport React, { Component } from \"react\";\nimport Joi from \"joi-browser\"; //import format from \"date-fns/format\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Form from \"../_components/common/form\";\nimport { saveDomainInfoFormToDatabase, getDomainInfoDataFromDatabase } from \"../helpers/domainInfoservice\";\nimport \"../css/datePicker.css\";\n\nclass DomainInfo extends Form {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      siteRegistredFromDate: null,\n      endOfActivityDate: null,\n      data: {\n        siteName: \"\",\n        domainOwner: \"\",\n        personForPayment: \"\",\n        personForAdministration: \"\"\n      },\n      errors: {}\n    };\n\n    this.handleDatePickerChange = (dateName, dateValue) => {\n      let _this$state = this.state,\n          siteRegistredFromDate = _this$state.siteRegistredFromDate,\n          endOfActivityDate = _this$state.endOfActivityDate;\n\n      if (dateName === \"siteRegistredFromDate\") {\n        siteRegistredFromDate = dateValue;\n      } else {\n        endOfActivityDate = dateValue;\n      }\n\n      this.setState({\n        siteRegistredFromDate,\n        endOfActivityDate\n      });\n    };\n\n    this.schema = {\n      siteName: Joi.string().required().label(\"siteName\"),\n      domainOwner: Joi.string().required().label(\"domainOwner\"),\n      personForPayment: Joi.string().required().label(\"personForPayment\"),\n      personForAdministration: Joi.string().required().label(\"personForAdministration\")\n    };\n\n    this.doOnSubmit = () => {\n      // console.log(document.getElementById(\"siteRegistredFromDate\").value);\n      // console.log(this.state.siteRegistredFromDate);\n      // call server\n      console.log(\"submitted\");\n      saveDomainInfoFormToDatabase(this.state.siteRegistredFromDate, this.state.endOfActivityDate, this.state.data.siteName, this.state.data.domainOwner, this.state.data.personForPayment, this.state.data.personForAdministration);\n    };\n\n    this.handleDateChangeRaw = e => {\n      e.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    let temp = getDomainInfoDataFromDatabase();\n    this.setState({\n      siteRegistredFromDate: temp.siteRegistredFromDate,\n      endOfActivityDate: temp.endOfActivityDate,\n      data: {\n        siteName: temp.data.siteName,\n        domainOwner: temp.data.domainOwner,\n        personForPayment: temp.data.personForPayment,\n        personForAdministration: temp.data.personForAdministration\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"statusTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Domain info\"), React.createElement(\"form\", {\n      autoComplete: \"off\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.renderInput(\"siteName\", \"text\", \"siteName\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Site registred from date\"), React.createElement(DatePicker, {\n      id: \"siteRegistredFromDate\",\n      name: \"siteRegistredFromDate\",\n      className: \"form-control\",\n      onChange: date => this.handleDatePickerChange(\"siteRegistredFromDate\", date),\n      onChangeRaw: this.handleDateChangeRaw,\n      selected: this.state.siteRegistredFromDate,\n      value: this.state.siteRegistredFromDate,\n      dateFormat: \"dd.MM.yyyy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"End of activity date\"), React.createElement(DatePicker, {\n      id: \"endOfActivityDate\",\n      name: \"endOfActivityDate\",\n      className: \"form-control\",\n      onChange: date => this.handleDatePickerChange(\"endOfActivityDate\", date),\n      onChangeRaw: this.handleDateChangeRaw,\n      selected: this.state.endOfActivityDate,\n      value: this.state.endOfActivityDate,\n      dateFormat: \"dd.MM.yyyy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }), this.renderInput(\"domainOwner\", \"text\", \"domain Owner\"), this.renderInput(\"personForPayment\", \"text\", \"personForPayment\"), this.renderInput(\"personForAdministration\", \"text\", \"personForAdministration\"), this.randerButton(\"Save\")));\n  }\n\n}\n\nexport default DomainInfo;","map":{"version":3,"sources":["C:\\Users\\benjamin.dedic\\Documents\\react\\wmt\\src\\_components\\DomainInfo.jsx"],"names":["React","Component","Joi","DatePicker","Form","saveDomainInfoFormToDatabase","getDomainInfoDataFromDatabase","DomainInfo","state","siteRegistredFromDate","endOfActivityDate","data","siteName","domainOwner","personForPayment","personForAdministration","errors","handleDatePickerChange","dateName","dateValue","setState","schema","string","required","label","doOnSubmit","console","log","handleDateChangeRaw","e","preventDefault","componentDidMount","temp","render","handleSubmit","renderInput","date","randerButton"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Joi from \"joi-browser\";\r\n\r\n//import format from \"date-fns/format\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport Form from \"../_components/common/form\";\r\nimport {\r\n  saveDomainInfoFormToDatabase,\r\n  getDomainInfoDataFromDatabase\r\n} from \"../helpers/domainInfoservice\";\r\n\r\nimport \"../css/datePicker.css\";\r\n\r\nclass DomainInfo extends Form {\r\n  state = {\r\n    siteRegistredFromDate: null,\r\n    endOfActivityDate: null,\r\n\r\n    data: {\r\n      siteName: \"\",\r\n      domainOwner: \"\",\r\n      personForPayment: \"\",\r\n      personForAdministration: \"\"\r\n    },\r\n    errors: {}\r\n  };\r\n  handleDatePickerChange = (dateName, dateValue) => {\r\n    let { siteRegistredFromDate, endOfActivityDate } = this.state;\r\n    if (dateName === \"siteRegistredFromDate\") {\r\n      siteRegistredFromDate = dateValue;\r\n    } else {\r\n      endOfActivityDate = dateValue;\r\n    }\r\n    this.setState({\r\n      siteRegistredFromDate,\r\n      endOfActivityDate\r\n    });\r\n  };\r\n\r\n  schema = {\r\n    siteName: Joi.string()\r\n      .required()\r\n      .label(\"siteName\"),\r\n\r\n    domainOwner: Joi.string()\r\n      .required()\r\n      .label(\"domainOwner\"),\r\n\r\n    personForPayment: Joi.string()\r\n      .required()\r\n      .label(\"personForPayment\"),\r\n\r\n    personForAdministration: Joi.string()\r\n      .required()\r\n      .label(\"personForAdministration\")\r\n  };\r\n  doOnSubmit = () => {\r\n    // console.log(document.getElementById(\"siteRegistredFromDate\").value);\r\n    // console.log(this.state.siteRegistredFromDate);\r\n\r\n    // call server\r\n\r\n    console.log(\"submitted\");\r\n    saveDomainInfoFormToDatabase(\r\n      this.state.siteRegistredFromDate,\r\n      this.state.endOfActivityDate,\r\n      this.state.data.siteName,\r\n      this.state.data.domainOwner,\r\n      this.state.data.personForPayment,\r\n      this.state.data.personForAdministration\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    let temp = getDomainInfoDataFromDatabase();\r\n\r\n    this.setState({\r\n      siteRegistredFromDate: temp.siteRegistredFromDate,\r\n      endOfActivityDate: temp.endOfActivityDate,\r\n      data: {\r\n        siteName: temp.data.siteName,\r\n        domainOwner: temp.data.domainOwner,\r\n        personForPayment: temp.data.personForPayment,\r\n        personForAdministration: temp.data.personForAdministration\r\n      }\r\n    });\r\n  }\r\n\r\n  handleDateChangeRaw = e => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2 className=\"statusTitle\">Domain info</h2>\r\n        <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\r\n          {this.renderInput(\"siteName\", \"text\", \"siteName\")}\r\n          <label>Site registred from date</label>\r\n          <DatePicker\r\n            id=\"siteRegistredFromDate\"\r\n            name=\"siteRegistredFromDate\"\r\n            className=\"form-control\"\r\n            onChange={date =>\r\n              this.handleDatePickerChange(\"siteRegistredFromDate\", date)\r\n            }\r\n            onChangeRaw={this.handleDateChangeRaw}\r\n            selected={this.state.siteRegistredFromDate}\r\n            value={this.state.siteRegistredFromDate}\r\n            dateFormat=\"dd.MM.yyyy\"\r\n          />\r\n          <label>End of activity date</label>\r\n          <DatePicker\r\n            id=\"endOfActivityDate\"\r\n            name=\"endOfActivityDate\"\r\n            className=\"form-control\"\r\n            onChange={date =>\r\n              this.handleDatePickerChange(\"endOfActivityDate\", date)\r\n            }\r\n            onChangeRaw={this.handleDateChangeRaw}\r\n            selected={this.state.endOfActivityDate}\r\n            value={this.state.endOfActivityDate}\r\n            dateFormat=\"dd.MM.yyyy\"\r\n          />\r\n\r\n          {this.renderInput(\"domainOwner\", \"text\", \"domain Owner\")}\r\n          {this.renderInput(\"personForPayment\", \"text\", \"personForPayment\")}\r\n          {this.renderInput(\r\n            \"personForAdministration\",\r\n            \"text\",\r\n            \"personForAdministration\"\r\n          )}\r\n          {this.randerButton(\"Save\")}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DomainInfo;\r\n"]},"metadata":{},"sourceType":"module"}