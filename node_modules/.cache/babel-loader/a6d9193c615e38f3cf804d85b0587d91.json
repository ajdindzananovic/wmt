{"ast":null,"code":"import _defineProperty from \"/home/ajdin/wmt/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/ajdin/wmt/src/_components/DomainInfo.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport Joi from \"joi-browser\";\nimport { saveDomain } from \"../_services/domainServices\"; //import format from \"date-fns/format\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Form from \"../_components/common/form\";\nimport { saveDomainInfoFormToDatabase, getDomainInfoDataFromDatabase } from \"../helpers/domainInfoservice\";\nimport \"../css/datePicker.css\";\n\nclass DomainInfo extends Form {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      domainRegDate: null,\n      domainEndOfActivity: null,\n      data: {\n        domainName: \"\",\n        domainOwner: \"\",\n        personForPayment: \"\",\n        personForAdministration: \"\"\n      },\n      errors: {}\n    };\n\n    this.handleDatePickerChange = (dateName, dateValue) => {\n      let _this$state = this.state,\n          domainRegDate = _this$state.domainRegDate,\n          domainEndOfActivity = _this$state.domainEndOfActivity;\n\n      if (dateName === \"domainRegDate\") {\n        domainRegDate = dateValue;\n      } else {\n        domainEndOfActivity = dateValue;\n      }\n\n      this.setState({\n        domainRegDate,\n        domainEndOfActivity\n      });\n    };\n\n    this.schema = {\n      domainName: Joi.string().required().label(\"domainName\"),\n      domainOwner: Joi.string().required().label(\"domainOwner\"),\n      personForPayment: Joi.string().required().label(\"personForPayment\"),\n      personForAdministration: Joi.string().required().label(\"personForAdministration\")\n    };\n\n    this.doOnSubmit = () => {\n      // console.log(document.getElementById(\"domainRegDate\").value);\n      // console.log(this.state.domainRegDate);\n      // call server\n      console.log(\"submitted\");\n      saveDomainInfoFormToDatabase(this.state.domainRegDate, this.state.domainEndOfActivity, this.state.data.domainName, this.state.data.domainOwner, this.state.data.personForPayment, this.state.data.personForAdministration);\n\n      const allData = _objectSpread({}, this.state);\n\n      console.log(allData);\n    };\n\n    this.handleDateChangeRaw = e => {\n      // so user can't enter data manualy\n      e.preventDefault();\n    };\n  }\n\n  componentDidMount() {\n    let temp = getDomainInfoDataFromDatabase();\n    this.setState({\n      domainRegDate: temp.domainRegDate,\n      domainEndOfActivity: temp.domainEndOfActivity,\n      data: {\n        domainName: temp.data.domainName,\n        domainOwner: temp.data.domainOwner,\n        personForPayment: temp.data.personForPayment,\n        personForAdministration: temp.data.personForAdministration\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"statusTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Domain info\"), React.createElement(\"form\", {\n      autoComplete: \"off\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, this.renderInput(\"domainName\", \"text\", \"domainName\"), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Site registred from date\"), React.createElement(DatePicker, {\n      id: \"domainRegDate\",\n      name: \"domainRegDate\",\n      className: \"form-control\",\n      onChange: date => this.handleDatePickerChange(\"domainRegDate\", date),\n      onChangeRaw: this.handleDateChangeRaw,\n      selected: this.state.domainRegDate,\n      value: this.state.domainRegDate,\n      dateFormat: \"dd.MM.yyyy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"End of activity date\"), React.createElement(DatePicker, {\n      id: \"domainEndOfActivity\",\n      name: \"domainEndOfActivity\",\n      className: \"form-control\",\n      onChange: date => this.handleDatePickerChange(\"domainEndOfActivity\", date),\n      onChangeRaw: this.handleDateChangeRaw,\n      selected: this.state.domainEndOfActivity,\n      value: this.state.domainEndOfActivity,\n      dateFormat: \"dd.MM.yyyy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), this.renderInput(\"domainOwner\", \"text\", \"domain Owner\"), this.renderInput(\"personForPayment\", \"text\", \"personForPayment\"), this.renderInput(\"personForAdministration\", \"text\", \"personForAdministration\"), this.randerButton(\"Save\")));\n  }\n\n}\n\nexport default DomainInfo;","map":{"version":3,"sources":["/home/ajdin/wmt/src/_components/DomainInfo.jsx"],"names":["React","Component","Joi","saveDomain","DatePicker","Form","saveDomainInfoFormToDatabase","getDomainInfoDataFromDatabase","DomainInfo","state","domainRegDate","domainEndOfActivity","data","domainName","domainOwner","personForPayment","personForAdministration","errors","handleDatePickerChange","dateName","dateValue","setState","schema","string","required","label","doOnSubmit","console","log","allData","handleDateChangeRaw","e","preventDefault","componentDidMount","temp","render","handleSubmit","renderInput","date","randerButton"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Joi from \"joi-browser\";\nimport { saveDomain } from \"../_services/domainServices\";\n//import format from \"date-fns/format\";\n\nimport DatePicker from \"react-datepicker\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport Form from \"../_components/common/form\";\nimport {\n  saveDomainInfoFormToDatabase,\n  getDomainInfoDataFromDatabase\n} from \"../helpers/domainInfoservice\";\n\nimport \"../css/datePicker.css\";\n\nclass DomainInfo extends Form {\n  state = {\n    domainRegDate: null,\n    domainEndOfActivity: null,\n\n    data: {\n      domainName: \"\",\n      domainOwner: \"\",\n      personForPayment: \"\",\n      personForAdministration: \"\"\n    },\n    errors: {}\n  };\n  handleDatePickerChange = (dateName, dateValue) => {\n    let { domainRegDate, domainEndOfActivity } = this.state;\n    if (dateName === \"domainRegDate\") {\n      domainRegDate = dateValue;\n    } else {\n      domainEndOfActivity = dateValue;\n    }\n    this.setState({\n      domainRegDate,\n      domainEndOfActivity\n    });\n  };\n\n  schema = {\n    domainName: Joi.string()\n      .required()\n      .label(\"domainName\"),\n\n    domainOwner: Joi.string()\n      .required()\n      .label(\"domainOwner\"),\n\n    personForPayment: Joi.string()\n      .required()\n      .label(\"personForPayment\"),\n\n    personForAdministration: Joi.string()\n      .required()\n      .label(\"personForAdministration\")\n  };\n  doOnSubmit = () => {\n    // console.log(document.getElementById(\"domainRegDate\").value);\n    // console.log(this.state.domainRegDate);\n\n    // call server\n\n    console.log(\"submitted\");\n    saveDomainInfoFormToDatabase(\n      this.state.domainRegDate,\n      this.state.domainEndOfActivity,\n      this.state.data.domainName,\n      this.state.data.domainOwner,\n      this.state.data.personForPayment,\n      this.state.data.personForAdministration\n    );\n    const allData = { ...this.state };\n    console.log(allData);\n  };\n\n  componentDidMount() {\n    let temp = getDomainInfoDataFromDatabase();\n\n    this.setState({\n      domainRegDate: temp.domainRegDate,\n      domainEndOfActivity: temp.domainEndOfActivity,\n      data: {\n        domainName: temp.data.domainName,\n        domainOwner: temp.data.domainOwner,\n        personForPayment: temp.data.personForPayment,\n        personForAdministration: temp.data.personForAdministration\n      }\n    });\n  }\n\n  handleDateChangeRaw = e => {\n    // so user can't enter data manualy\n    e.preventDefault();\n  };\n\n  render() {\n    return (\n      <div>\n        <h2 className=\"statusTitle\">Domain info</h2>\n        <form autoComplete=\"off\" onSubmit={this.handleSubmit}>\n          {this.renderInput(\"domainName\", \"text\", \"domainName\")}\n          <label>Site registred from date</label>\n          <DatePicker\n            id=\"domainRegDate\"\n            name=\"domainRegDate\"\n            className=\"form-control\"\n            onChange={date =>\n              this.handleDatePickerChange(\"domainRegDate\", date)\n            }\n            onChangeRaw={this.handleDateChangeRaw}\n            selected={this.state.domainRegDate}\n            value={this.state.domainRegDate}\n            dateFormat=\"dd.MM.yyyy\"\n          />\n          <label>End of activity date</label>\n          <DatePicker\n            id=\"domainEndOfActivity\"\n            name=\"domainEndOfActivity\"\n            className=\"form-control\"\n            onChange={date =>\n              this.handleDatePickerChange(\"domainEndOfActivity\", date)\n            }\n            onChangeRaw={this.handleDateChangeRaw}\n            selected={this.state.domainEndOfActivity}\n            value={this.state.domainEndOfActivity}\n            dateFormat=\"dd.MM.yyyy\"\n          />\n\n          {this.renderInput(\"domainOwner\", \"text\", \"domain Owner\")}\n          {this.renderInput(\"personForPayment\", \"text\", \"personForPayment\")}\n          {this.renderInput(\n            \"personForAdministration\",\n            \"text\",\n            \"personForAdministration\"\n          )}\n          {this.randerButton(\"Save\")}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default DomainInfo;\n"]},"metadata":{},"sourceType":"module"}