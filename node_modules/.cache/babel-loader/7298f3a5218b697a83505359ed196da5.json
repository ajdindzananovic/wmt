{"ast":null,"code":"import _defineProperty from \"/home/codebase/wmt/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/codebase/wmt/src/_components/common/form.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport Input from \"../common/input\";\n\nclass Form extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleChange = ({\n      currentTarget: input\n    }) => {\n      const data = _objectSpread({}, this.state.data);\n\n      data[input.name] = input.value;\n      this.setState({\n        data\n      });\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.doOnSubmit();\n    };\n  }\n\n  randerButton(label) {\n    return React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"btn btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, label);\n  }\n\n  renderInput(name, type, label) {\n    const data = this.state.data;\n    return React.createElement(Input, {\n      onChange: this.handleChange,\n      value: data[name],\n      name: name,\n      type: type,\n      label: label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Form;","map":{"version":3,"sources":["/home/codebase/wmt/src/_components/common/form.jsx"],"names":["React","Component","Input","Form","handleChange","currentTarget","input","data","state","name","value","setState","handleSubmit","e","preventDefault","doOnSubmit","randerButton","label","renderInput","type"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;;AACA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;;AAAA,SAoB3BG,YApB2B,GAoBZ,CAAC;AAAEC,MAAAA,aAAa,EAAEC;AAAjB,KAAD,KAA8B;AAC3C,YAAMC,IAAI,qBAAQ,KAAKC,KAAL,CAAWD,IAAnB,CAAV;;AACAA,MAAAA,IAAI,CAACD,KAAK,CAACG,IAAP,CAAJ,GAAmBH,KAAK,CAACI,KAAzB;AACA,WAAKC,QAAL,CAAc;AAAEJ,QAAAA;AAAF,OAAd;AACD,KAxB0B;;AAAA,SAyB3BK,YAzB2B,GAyBZC,CAAC,IAAI;AAClBA,MAAAA,CAAC,CAACC,cAAF;AACA,WAAKC,UAAL;AACD,KA5B0B;AAAA;;AA8B3BC,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAClB,WACE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,KADH,CADF;AAKD;;AACDC,EAAAA,WAAW,CAACT,IAAD,EAAOU,IAAP,EAAaF,KAAb,EAAoB;AAAA,UACrBV,IADqB,GACZ,KAAKC,KADO,CACrBD,IADqB;AAE7B,WACE,oBAAC,KAAD;AACE,MAAA,QAAQ,EAAE,KAAKH,YADjB;AAEE,MAAA,KAAK,EAAEG,IAAI,CAACE,IAAD,CAFb;AAGE,MAAA,IAAI,EAAEA,IAHR;AAIE,MAAA,IAAI,EAAEU,IAJR;AAKE,MAAA,KAAK,EAAEF,KALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASD;;AAhD0B;;AAmD7B,eAAed,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Input from \"../common/input\";\nclass Form extends Component {\n  /* \n  \n    Function description:\n\n   * handleChange - take value from input and update state.\n\n   * handleSubmit - what happens when we click submit.In the form that extends \n     this form it is necessary to implement the doOnSubmit function \n     and define what will happen when submitting.\n     For example, call server and insert data.\n    \n   * randerButton - render button dynamic.\n   * renderInput  - render input field dynamic. You need to send this function:\n                                  *name of input field \n                                  *type of input field\n                                  *label of input field\n    \n    */\n\n  handleChange = ({ currentTarget: input }) => {\n    const data = { ...this.state.data };\n    data[input.name] = input.value;\n    this.setState({ data });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.doOnSubmit();\n  };\n\n  randerButton(label) {\n    return (\n      <button type=\"submit\" className=\"btn btn-primary\">\n        {label}\n      </button>\n    );\n  }\n  renderInput(name, type, label) {\n    const { data } = this.state;\n    return (\n      <Input\n        onChange={this.handleChange}\n        value={data[name]}\n        name={name}\n        type={type}\n        label={label}\n      />\n    );\n  }\n}\n\nexport default Form;\n"]},"metadata":{},"sourceType":"module"}