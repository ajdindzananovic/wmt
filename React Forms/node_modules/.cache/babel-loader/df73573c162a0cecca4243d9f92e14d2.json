{"ast":null,"code":"var _jsxFileName = \"/home/benjamin/Documents/Repository/wmt/React Forms/src/components/widgets/Forms/formFields.js\";\nimport React from \"react\";\n\nconst FormFields = props => {\n  const renderFields = () => {\n    const formArray = [];\n\n    for (let elementName in props.formData) {\n      formArray.push({\n        id: elementName,\n        settings: props.formData[elementName]\n      });\n    }\n\n    return formArray.map((item, i) => {\n      return React.createElement(\"div\", {\n        key: i,\n        className: \"form_element\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, renderTemplates(item));\n    });\n  };\n\n  const changeHandler = (event, id, blur) => {\n    const newState = props.formData;\n    newState[id].value = event.target.value;\n\n    if (blur) {\n      let validData = validate(newState[id]);\n      newState[id].valid = validData[0];\n      newState[id].validationMessage = validData[1];\n    }\n\n    newState[id].touched = blur;\n    console.log(newState);\n    props.change(newState);\n  };\n\n  const validate = element => {\n    console.log(element);\n    let error = [true, \"\"];\n\n    if (element.validation.minLen) {\n      const valid = element.value.length >= element.validation.minLen;\n      const message = \"\".concat(!valid ? \"Must be grater than \" + element.validation.minLen : \"\");\n      error = !valid ? [valid, message] : error;\n    }\n\n    if (element.validation.required) {\n      const valid = element.value.trim() !== \"\";\n      const message = \"\".concat(!valid ? \"This field is required\" : \"\");\n      error = !valid ? [valid, message] : error;\n    }\n\n    return error;\n  };\n\n  const showLabel = (show, label) => {\n    return show ? React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, label) : null;\n  };\n\n  const showValidation = data => {\n    let errorMessage = null;\n\n    if (data.validation && !data.valid) {\n      errorMessage = React.createElement(\"div\", {\n        className: \"label_error\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, data.validationMessage);\n    }\n\n    return errorMessage;\n  };\n\n  const renderTemplates = data => {\n    let formTemplate = \"\";\n    let values = data.settings;\n\n    switch (values.element) {\n      case \"input\":\n        formTemplate = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, showLabel(values.label, values.labelText), React.createElement(\"input\", Object.assign({}, values.config, {\n          value: values.value,\n          OnBlur: event => changeHandler(event, data.id, true),\n          onChange: event => changeHandler(event, data.id, false),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        })), showValidation(values));\n        break;\n\n      case \"textarea\":\n        formTemplate = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, showLabel(values.label, values.labelText), React.createElement(\"textarea\", Object.assign({}, values.config, {\n          value: values.value,\n          onChange: event => changeHandler(event, data.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        })));\n        break;\n\n      case \"select\":\n        formTemplate = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, showLabel(values.label, values.labelText), React.createElement(\"select\", {\n          value: values.value,\n          name: values.config.name,\n          onChange: event => changeHandler(event, data.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, values.config.options.map((item, i) => React.createElement(\"option\", {\n          key: i,\n          value: item.val,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, item.text))));\n        break;\n\n      default:\n        formTemplate = null;\n    }\n\n    return formTemplate;\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, renderFields());\n};\n\nexport default FormFields;","map":{"version":3,"sources":["/home/benjamin/Documents/Repository/wmt/React Forms/src/components/widgets/Forms/formFields.js"],"names":["React","FormFields","props","renderFields","formArray","elementName","formData","push","id","settings","map","item","i","renderTemplates","changeHandler","event","blur","newState","value","target","validData","validate","valid","validationMessage","touched","console","log","change","element","error","validation","minLen","length","message","required","trim","showLabel","show","label","showValidation","data","errorMessage","formTemplate","values","labelText","config","name","options","val","text"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nconst FormFields = props => {\n  const renderFields = () => {\n    const formArray = [];\n\n    for (let elementName in props.formData) {\n      formArray.push({\n        id: elementName,\n        settings: props.formData[elementName]\n      });\n    }\n    return formArray.map((item, i) => {\n      return (\n        <div key={i} className=\"form_element\">\n          {renderTemplates(item)}\n        </div>\n      );\n    });\n  };\n\n  const changeHandler = (event, id, blur) => {\n    const newState = props.formData;\n\n    newState[id].value = event.target.value;\n\n    if (blur) {\n      let validData = validate(newState[id]);\n      newState[id].valid = validData[0];\n      newState[id].validationMessage = validData[1];\n    }\n    newState[id].touched = blur;\n    console.log(newState);\n    props.change(newState);\n  };\n\n  const validate = element => {\n    console.log(element);\n\n    let error = [true, \"\"];\n\n    if (element.validation.minLen) {\n      const valid = element.value.length >= element.validation.minLen;\n      const message = `${\n        !valid ? \"Must be grater than \" + element.validation.minLen : \"\"\n      }`;\n\n      error = !valid ? [valid, message] : error;\n    }\n\n    if (element.validation.required) {\n      const valid = element.value.trim() !== \"\";\n      const message = `${!valid ? \"This field is required\" : \"\"}`;\n\n      error = !valid ? [valid, message] : error;\n    }\n\n    return error;\n  };\n  const showLabel = (show, label) => {\n    return show ? <label>{label}</label> : null;\n  };\n\n  const showValidation = data => {\n    let errorMessage = null;\n\n    if (data.validation && !data.valid) {\n      errorMessage = (\n        <div className=\"label_error\">{data.validationMessage}</div>\n      );\n    }\n\n    return errorMessage;\n  };\n  const renderTemplates = data => {\n    let formTemplate = \"\";\n    let values = data.settings;\n\n    switch (values.element) {\n      case \"input\":\n        formTemplate = (\n          <div>\n            {showLabel(values.label, values.labelText)}\n            <input\n              {...values.config}\n              value={values.value}\n              OnBlur={event => changeHandler(event, data.id, true)}\n              onChange={event => changeHandler(event, data.id, false)}\n            />\n            {showValidation(values)}\n          </div>\n        );\n\n        break;\n      case \"textarea\":\n        formTemplate = (\n          <div>\n            {showLabel(values.label, values.labelText)}\n            <textarea\n              {...values.config}\n              value={values.value}\n              onChange={event => changeHandler(event, data.id)}\n            />\n          </div>\n        );\n        break;\n      case \"select\":\n        formTemplate = (\n          <div>\n            {showLabel(values.label, values.labelText)}\n            <select\n              value={values.value}\n              name={values.config.name}\n              onChange={event => changeHandler(event, data.id)}\n            >\n              {values.config.options.map((item, i) => (\n                <option key={i} value={item.val}>\n                  {item.text}\n                </option>\n              ))}\n            </select>\n          </div>\n        );\n        break;\n      default:\n        formTemplate = null;\n    }\n    return formTemplate;\n  };\n\n  return <div>{renderFields()}</div>;\n};\n\nexport default FormFields;\n"]},"metadata":{},"sourceType":"module"}