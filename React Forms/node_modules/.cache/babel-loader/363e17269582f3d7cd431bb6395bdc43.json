{"ast":null,"code":"var _jsxFileName = \"/home/benjamin/Documents/Repository/wmt/React Forms/src/components/widgets/Forms/formFields.js\";\nimport React from \"react\";\n\nconst FormFields = props => {\n  const renderFields = () => {\n    const formArray = [];\n\n    for (let elementName in props.formData) {\n      formArray.push({\n        id: elementName,\n        settings: props.formData[elementName]\n      });\n    }\n\n    return formArray.map((item, i) => {\n      return React.createElement(\"div\", {\n        key: i,\n        className: \"form_element\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, renderTemplates(item));\n    });\n  };\n\n  const changeHandler = (event, id) => {\n    const newState = props.formData;\n    newState[id].value = event.target.value;\n    let validData = validate(newState[id]);\n    newState[id].valid = validData[0];\n    newState[id].validationMessage = validData[1];\n    console.log(newState);\n    props.change(newState);\n  };\n\n  const validate = element => {\n    console.log(element);\n    let error = [true, \"\"];\n\n    if (element.validation.required) {\n      const valid = element.value.trim() !== \"\";\n      const message = \"\".concat(!valid ? \"This field is required\" : \"\");\n      error = !valid ? [valid, message] : error;\n    }\n\n    return error;\n  };\n\n  const showLabel = (show, label) => {\n    return show ? React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, label) : null;\n  };\n\n  const renderTemplates = data => {\n    let formTemplate = \"\";\n    let values = data.settings;\n\n    switch (values.element) {\n      case \"input\":\n        formTemplate = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        }, showLabel(values.label, values.labelText), React.createElement(\"input\", Object.assign({}, values.config, {\n          value: values.value,\n          onChange: event => changeHandler(event, data.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        })), showValidation(values));\n        break;\n\n      case \"textarea\":\n        formTemplate = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, showLabel(values.label, values.labelText), React.createElement(\"textarea\", Object.assign({}, values.config, {\n          value: values.value,\n          onChange: event => changeHandler(event, data.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        })));\n        break;\n\n      case \"select\":\n        formTemplate = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, showLabel(values.label, values.labelText), React.createElement(\"select\", {\n          value: values.value,\n          name: values.config.name,\n          onChange: event => changeHandler(event, data.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, values.config.options.map((item, i) => React.createElement(\"option\", {\n          key: i,\n          value: item.val,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, item.text))));\n        break;\n\n      default:\n        formTemplate = null;\n    }\n\n    return formTemplate;\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, renderFields());\n};\n\nexport default FormFields;","map":{"version":3,"sources":["/home/benjamin/Documents/Repository/wmt/React Forms/src/components/widgets/Forms/formFields.js"],"names":["React","FormFields","props","renderFields","formArray","elementName","formData","push","id","settings","map","item","i","renderTemplates","changeHandler","event","newState","value","target","validData","validate","valid","validationMessage","console","log","change","element","error","validation","required","trim","message","showLabel","show","label","data","formTemplate","values","labelText","config","showValidation","name","options","val","text"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nconst FormFields = props => {\n  const renderFields = () => {\n    const formArray = [];\n\n    for (let elementName in props.formData) {\n      formArray.push({\n        id: elementName,\n        settings: props.formData[elementName]\n      });\n    }\n    return formArray.map((item, i) => {\n      return (\n        <div key={i} className=\"form_element\">\n          {renderTemplates(item)}\n        </div>\n      );\n    });\n  };\n\n  const changeHandler = (event, id) => {\n    const newState = props.formData;\n\n    newState[id].value = event.target.value;\n\n    let validData = validate(newState[id]);\n    newState[id].valid = validData[0];\n    newState[id].validationMessage = validData[1];\n\n    console.log(newState);\n    props.change(newState);\n  };\n\n  const validate = element => {\n    console.log(element);\n\n    let error = [true, \"\"];\n\n    if (element.validation.required) {\n      const valid = element.value.trim() !== \"\";\n      const message = `${!valid ? \"This field is required\" : \"\"}`;\n\n      error = !valid ? [valid, message] : error;\n    }\n\n    return error;\n  };\n  const showLabel = (show, label) => {\n    return show ? <label>{label}</label> : null;\n  };\n  const renderTemplates = data => {\n    let formTemplate = \"\";\n    let values = data.settings;\n\n    switch (values.element) {\n      case \"input\":\n        formTemplate = (\n          <div>\n            {showLabel(values.label, values.labelText)}\n            <input\n              {...values.config}\n              value={values.value}\n              onChange={event => changeHandler(event, data.id)}\n            />\n            {showValidation(values)}\n          </div>\n        );\n\n        break;\n      case \"textarea\":\n        formTemplate = (\n          <div>\n            {showLabel(values.label, values.labelText)}\n            <textarea\n              {...values.config}\n              value={values.value}\n              onChange={event => changeHandler(event, data.id)}\n            />\n          </div>\n        );\n        break;\n      case \"select\":\n        formTemplate = (\n          <div>\n            {showLabel(values.label, values.labelText)}\n            <select\n              value={values.value}\n              name={values.config.name}\n              onChange={event => changeHandler(event, data.id)}\n            >\n              {values.config.options.map((item, i) => (\n                <option key={i} value={item.val}>\n                  {item.text}\n                </option>\n              ))}\n            </select>\n          </div>\n        );\n        break;\n      default:\n        formTemplate = null;\n    }\n    return formTemplate;\n  };\n\n  return <div>{renderFields()}</div>;\n};\n\nexport default FormFields;\n"]},"metadata":{},"sourceType":"module"}